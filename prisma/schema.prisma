// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Log           Log[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Log {
  id                       String           @id @default(uuid())
  date                     DateTime         @default(now())
  moodRating               Int // Scale from 1-10
  anxietyLevel             Int // Scale from 1-10
  sleepHours               Float
  sleepQuality             Int // Scale from 1-10
  stressLevel              Int // Scale from 1-10
  physicalActivity         ActivityCategory
  activityDuration         Int // Minutes
  socialInteraction        Int // Scale from 1-10
  depressionSymptoms       Boolean
  anxietySymptoms          Boolean
  depresionSymptomSeverity Int? // Scale from 1-10 if depression symptoms is true
  axtientySymptomSeverity  Int? // Scale from 1-10 if axiety symptoms is true
  notes                    String?
  user                     User             @relation(fields: [userId], references: [id])
  userId                   String
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
}

enum ActivityCategory {
  WALKING
  RUNNING
  CYCLING
  SWIMMING
  HIKING
  GYM_WORKOUT
  YOGA
  PILATES
  DANCING
  MARTIAL_ARTS
  TEAM_SPORTS
  RACQUET_SPORTS
  WATER_SPORTS
  WINTER_SPORTS
  HOME_WORKOUT
  CALISTHENICS
  WEIGHTLIFTING
  CROSSFIT
  BOXING
  CLIMBING
  SKATEBOARDING
  ROWING
  OTHER
  NONE
}
